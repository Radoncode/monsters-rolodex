{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredFields","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,uBAAOC,UAAU,SAAUC,KAAK,SACxBH,YAAaA,EACbI,SAAUH,KCJTI,G,YAAO,SAAEC,GAAF,OAChB,sBAAKJ,UAAU,iBAAf,UACI,qBAAKK,IAAI,UAAUC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACtB,6BAAMJ,EAAMG,QAAQE,OACpB,4BAAKL,EAAMG,QAAQG,aCFdC,EAAW,SAAAP,GAAK,OACzB,qBAAKJ,UAAU,YAAf,SACKI,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAASA,GAAtBA,EAAQC,UCiCjBM,E,kDAjCb,aAAe,IAAD,8BACZ,gBASFf,aAAe,SAACgB,GAAD,OACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SARrC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAa,IALH,E,qDAcd,WAAqB,IAAD,OAClBI,MAAM,+CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEJ,SAAUa,S,oBAG3C,WAAU,IAAD,EAC2BC,KAAKN,MAA/BR,EADD,EACCA,SAAUK,EADX,EACWA,YACZU,EAAiBf,EAASgB,QAAQ,SAAArB,GAAO,OAAIA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYc,wBACnG,OACE,sBAAK/B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAWF,YAAY,aAAaC,aAAc2B,KAAK3B,eACvD,cAAC,EAAD,CAAUa,SAAUe,W,GA5BVK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.25883e9c.chunk.js","sourcesContent":["import './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n   \n    <input className='search'  type='search'\n            placeholder={placeholder}\n            onChange={handleChange}\n    />\n)","import './card.styles.css';\n\nexport const Card = ( props ) => \n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`}/>\n        <h2>{ props.monster.name }</h2>\n        <p>{ props.monster.email }</p>\n    </div>\n","import './card-list.styles.css';\n\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => \n    <div className='card-list'>\n        {props.monsters.map(monster => (\n            <Card key={ monster.id } monster={monster} />\n    ))}\n    </div>;","import { Component } from 'react';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n      \n  }\n\n  handleChange = (e) => (\n    this.setState({searchField: e.target.value})\n  )\n  \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users/')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }))\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredFields = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1> Monsters Roledex</h1>\n        <SearchBox placeholder='search box' handleChange={this.handleChange}/>\n        <CardList monsters={filteredFields}/> \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}